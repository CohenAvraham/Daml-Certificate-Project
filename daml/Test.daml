module Test where

import Daml.Script
import Main
import Setup

import DA.Either
import DA.List

testUnHappyTalentProposal : Script ()
testUnHappyTalentProposal = script do
  (institution, environmentParties@EnvironmentParties{..}) <- initSetup

  -- only students can propose themselves as talents
  submitMustFail manager do
    exerciseCmd institution CreateNewTalentProposal with
      student = manager
      talentRecruiter = recruiter
      talentInfo = TalentInfo with
                     applicant = talent
                     firstName = "Daml"
                     lastName = "Certificate"
                     age = 20
                     additionalInfo = []
                     capabilities = TalentCapabilities with
                                      canSwim = True
                                      canDive = False
                                      canHandstand = True
                                      canWalkingOnHands = False
                                      canRopeJump = True
  pure ()


testUnHappyRecruiterReview : Script ()
testUnHappyRecruiterReview = script do
  (institution, environmentParties@EnvironmentParties{..}) <- initSetup

  proposalCid <- submit talent do
    exerciseCmd institution CreateNewTalentProposal with
      student = talent
      talentRecruiter = recruiter
      talentInfo = TalentInfo with
                     applicant = talent
                     firstName = "Daml"
                     lastName = "Certificate"
                     age = 20
                     additionalInfo = []
                     capabilities = TalentCapabilities with
                                      canSwim = True
                                      canDive = False
                                      canHandstand = True
                                      canWalkingOnHands = False
                                      canRopeJump = True

  -- the recruiter is assigning the wrong recruiter to review the application
  submitMustFail recruiter do
    exerciseCmd institution ReviewNewTalentProposal with
      recruiter = recruiter2
      ..
  pure ()


testUnHappyWrongInspectorReview : Script ()
testUnHappyWrongInspectorReview = script do
  (institution, environmentParties@EnvironmentParties{..}) <- initSetup

  proposalCid <- submit talent do
    exerciseCmd institution CreateNewTalentProposal with
      student = talent
      talentRecruiter = recruiter
      talentInfo = TalentInfo with
                     applicant = talent
                     firstName = "Daml"
                     lastName = "Certificate"
                     age = 20
                     additionalInfo = []
                     capabilities = TalentCapabilities with
                                      canSwim = True
                                      canDive = False
                                      canHandstand = True
                                      canWalkingOnHands = False
                                      canRopeJump = True

  eitherProposalCid <- submit recruiter do
    exerciseCmd institution ReviewNewTalentProposal with
      recruiter = recruiter
      ..

  let recruiterProposalCid = head $ rights [eitherProposalCid]

  -- inspector can reject an application but cannot cancel
  submitMustFail inspector do
    exerciseCmd recruiterProposalCid CancelProposal with
      requestor = inspector

  pure ()


testApprovedFlow : Script ()
testApprovedFlow = script do

  environmentParties@EnvironmentParties{..} <- setupParties

  talentPropodalId <- submit talent do
    createCmd TalentIntroductionProposal with
      talentInfo = TalentInfo with
                     applicant = talent
                     firstName = "Daml"
                     lastName = "Certificate"
                     age = 20
                     additionalInfo = []
                     capabilities = TalentCapabilities with
                                      canSwim = True
                                      canDive = False
                                      canHandstand = True
                                      canWalkingOnHands = False
                                      canRopeJump = True
      talentRecruiter = recruiter
      status = Applied
      feedback = ""
      ..

  recruiterProposalId <- submit recruiter do
    exerciseCmd talentPropodalId ApproveProposal with
      inspector

  needMoreInfoId <- submit inspector do
    exerciseCmd recruiterProposalId RequestMoreInfo
      with
        feedback = "What is your special talent?"

  revisedProposalId <- submit recruiter do
    exerciseCmd needMoreInfoId ReviseProposal with
      requestor = recruiter
      feedback = "Can hold my breath under the water for 4 minutes"

  talentId <- submit inspector do
    exerciseCmd revisedProposalId Approve
      with
        feedback = "This is fantastic"

  pure ()


testRejectedFlow : Script ()
testRejectedFlow = script do

  environmentParties@EnvironmentParties{..} <- setupParties

  talentPropodalId <- submit talent do
    createCmd TalentIntroductionProposal with
      talentInfo = TalentInfo with
                     applicant = talent
                     firstName = "Daml"
                     lastName = "Certificate"
                     age = 20
                     additionalInfo = []
                     capabilities = TalentCapabilities with
                        canSwim = True
                        canDive = False
                        canHandstand = True
                        canWalkingOnHands = False
                        canRopeJump = True
      talentRecruiter = recruiter
      status = Applied
      feedback = ""
      ..

  recruiterProposalId <- submit recruiter do
    exerciseCmd talentPropodalId ApproveProposal with
      inspector

  needMoreInfoId <- submit inspector do
    exerciseCmd recruiterProposalId RequestMoreInfo
      with
        feedback = "What is your special talent?"

  revisedProposalId <- submit recruiter do
    exerciseCmd needMoreInfoId ReviseProposal with
      requestor = recruiter
      feedback = "Can hold my breath under the water for 4 minutes"

  talentId <- submit inspector do
    exerciseCmd revisedProposalId RejectApplicant
      with
        feedback = "This is not good enough"

  pure ()

